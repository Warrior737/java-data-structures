Behavioral Design Patterns in Java

Focus on how objects and classes interact and communicate in software development.

Observer->
Defines a one-to-many dependency between objects so that when one object changes state, all dependencies are notify to update automatically

Command->
Encapsulates a request as an object, thereby it allow to parametrize clients with different requests, queue or log requests.

State ->  Allows an object to alter its behaviour when its internal state changes, making the object appear to change its class.
Template Method ->  Defines the skeleton of an algorithm in a superclass but lets subclasses override specific steps without changes its structure
Iterator -> Provides a way to access elements of an aggregate object without exposing its underlying representation -> hasNext()  return true;  next () return element.